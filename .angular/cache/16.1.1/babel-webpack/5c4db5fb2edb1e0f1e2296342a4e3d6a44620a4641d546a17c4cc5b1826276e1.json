{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-charts\";\nexport class overallChartComponent {\n  constructor() {\n    this.data = [];\n    this.barChartOptions = {\n      scaleShowVerticalLines: false,\n      responsive: true\n    };\n    this.barChartLabels = [];\n    this.barChartLegend = true;\n    this.barChartType = 'bar';\n    this.barChartData = [];\n  }\n  ngOnChanges() {\n    // Update the chart labels to reflect the timestamps from the data\n    this.barChartLabels = this.data.map(item => item.timestamp);\n    // Update the chart data with the respective values from the data\n    this.barChartData = [{\n      data: this.data.map(item => item.impressions),\n      label: 'Impressions'\n    }, {\n      data: this.data.map(item => item.clicks),\n      label: 'Clicks'\n    }, {\n      data: this.data.map(item => item.cost),\n      label: 'Cost'\n    }, {\n      data: this.data.map(item => item.conversions),\n      label: 'Conversions'\n    }];\n  }\n}\noverallChartComponent.ɵfac = function overallChartComponent_Factory(t) {\n  return new (t || overallChartComponent)();\n};\noverallChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: overallChartComponent,\n  selectors: [[\"app-overallChart\"]],\n  inputs: {\n    data: \"data\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 4,\n  consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\"]],\n  template: function overallChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"legend\", ctx.barChartLegend);\n    }\n  },\n  dependencies: [i1.BaseChartDirective],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["overallChartComponent","constructor","data","barChartOptions","scaleShowVerticalLines","responsive","barChartLabels","barChartLegend","barChartType","barChartData","ngOnChanges","map","item","timestamp","impressions","label","clicks","cost","conversions","selectors","inputs","features","i0","ɵɵNgOnChangesFeature","decls","vars","consts","template","overallChartComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\Eyal\\Documents\\dashboardApp\\src\\app\\overallChart\\overallChart.component.ts","C:\\Users\\Eyal\\Documents\\dashboardApp\\src\\app\\overallChart\\overallChart.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { DashboardData } from '../dashboard-data.model';\n\n@Component({\n  selector: 'app-overallChart',\n  templateUrl: './overallChart.component.html',\n  styleUrls: ['./overallChart.component.css'],\n})\nexport class overallChartComponent {\n  @Input() data: DashboardData[] = [];\n\n  barChartOptions: any = {\n    scaleShowVerticalLines: false,\n    responsive: true,\n  };\n  barChartLabels: string[] = [];\n  barChartLegend = true;\n  barChartType = 'bar';\n  barChartData: any[] = [];\n\n  constructor() {}\n\n  ngOnChanges() {\n    // Update the chart labels to reflect the timestamps from the data\n    this.barChartLabels = this.data.map((item) => item.timestamp);\n\n    // Update the chart data with the respective values from the data\n    this.barChartData = [\n      {\n        data: this.data.map((item) => item.impressions),\n        label: 'Impressions',\n      },\n      { data: this.data.map((item) => item.clicks), label: 'Clicks' },\n      { data: this.data.map((item) => item.cost), label: 'Cost' },\n      {\n        data: this.data.map((item) => item.conversions),\n        label: 'Conversions',\n      },\n    ];\n  }\n}\n","<div style=\"display: block\">\n  <canvas\n    baseChart\n    [datasets]=\"barChartData\"\n    [labels]=\"barChartLabels\"\n    [options]=\"barChartOptions\"\n    [legend]=\"barChartLegend\"\n  >\n  </canvas>\n</div>\n"],"mappings":";;AAQA,OAAM,MAAOA,qBAAqB;EAYhCC,YAAA;IAXS,KAAAC,IAAI,GAAoB,EAAE;IAEnC,KAAAC,eAAe,GAAQ;MACrBC,sBAAsB,EAAE,KAAK;MAC7BC,UAAU,EAAE;KACb;IACD,KAAAC,cAAc,GAAa,EAAE;IAC7B,KAAAC,cAAc,GAAG,IAAI;IACrB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,YAAY,GAAU,EAAE;EAET;EAEfC,WAAWA,CAAA;IACT;IACA,IAAI,CAACJ,cAAc,GAAG,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,SAAS,CAAC;IAE7D;IACA,IAAI,CAACJ,YAAY,GAAG,CAClB;MACEP,IAAI,EAAE,IAAI,CAACA,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACE,WAAW,CAAC;MAC/CC,KAAK,EAAE;KACR,EACD;MAAEb,IAAI,EAAE,IAAI,CAACA,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACI,MAAM,CAAC;MAAED,KAAK,EAAE;IAAQ,CAAE,EAC/D;MAAEb,IAAI,EAAE,IAAI,CAACA,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACK,IAAI,CAAC;MAAEF,KAAK,EAAE;IAAM,CAAE,EAC3D;MACEb,IAAI,EAAE,IAAI,CAACA,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACM,WAAW,CAAC;MAC/CH,KAAK,EAAE;KACR,CACF;EACH;;AA/BWf,qBAAqB,C;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB,C;QAArBA,qBAAqB;EAAAmB,SAAA;EAAAC,MAAA;IAAAlB,IAAA;EAAA;EAAAmB,QAAA,GAAAC,EAAA,CAAAC,oBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCRlCP,EAAA,CAAAS,cAAA,aAA4B;MAC1BT,EAAA,CAAAU,SAAA,gBAOS;MACXV,EAAA,CAAAW,YAAA,EAAM;;;MANFX,EAAA,CAAAY,SAAA,GAAyB;MAAzBZ,EAAA,CAAAa,UAAA,aAAAL,GAAA,CAAArB,YAAA,CAAyB,WAAAqB,GAAA,CAAAxB,cAAA,aAAAwB,GAAA,CAAA3B,eAAA,YAAA2B,GAAA,CAAAvB,cAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}